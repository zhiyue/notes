* python
** language
*** encoding
python字符串是unicode类型，二进制是str类型。
   - encode是将unicode转换成为str
   - decode是将str转换成为unicode
#+BEGIN_EXAMPLE
>>> a="中国"
>>> a
'\xe4\xb8\xad\xe5\x9b\xbd'
>>> a.decode('utf8')
u'\u4e2d\u56fd'
>>> print a.decode('utf8')
中国
>>> print a.decode('gb18030')
涓浗
#+END_EXAMPLE

这里一个比较难处理的问题就是字符编码的识别，现在处理的办法就是尝试全部转换成为utf8来进行处理。实现办法就是首先尝试转换到gb18030,如果转换失败的话那么转换成为utf8（当然这不是最好的，使用chardet这样的模块似乎是更合理的选择），
这样的操作对于我们中国大陆用户来说基本上应该OK，就我所知道的系统XP都是GB2312编码，linux/mac通常设置成为utf8，而cygwin这样架在windows上面的系统通常也是gb2312。

#+BEGIN_SRC Python
def toUTF8(s):
    try:
        # detect gb2312 first.
        return s.decode('gb2312').encode('utf8')
    except UnicodeDecodeError,e:
        return s

def toLocal(s):
    try:
        open(s,'r') # what a tricky way.
        return s
    except IOError,e:
        if(e.errno==22): # errno.EINVAL
            return s.decode('utf8').encode('gb2312')
        return s
#+END_SRC
对于从本地转换出去的话，我们首先尝试使用gb2312进行decode，如果失败的话那么就认为是utf8编码，当然这里会有一定的错误机率（但是不大）。
转换到本地的话，我们唯一不确定的就是本地是utf8格式还是gb2312格式。可以通过尝试打开一个文件来判断，其中22是errno.EINVAL的错误编码。
如果字符编码错误的话，那么返回的就是invalid argument的错误，同样会存在一定错误机率（但是不大）。出现错误几率的原因就是这些码点，使用
gb2312可以正常解释，使用utf8也可以正常解释。

-----
note(dirlt)：最近修改饭团系统的时候，使用sqlitedb还出现了字符编码问题。系统似乎默认使用ascii来进行编码解码，可以修改系统默认的编码解码方式为utf8。
#+BEGIN_SRC Python
import sys
if(sys.getdefaultencoding() !='utf8'):
  reload(sys)
  sys.setdefaultencoding('utf8')
#+END_SRC

** ipython
- <TAB> 可以提示补全信息
- timeit <expr> # 测量<expr>执行时间
- run <file> # 运行<file>
- cd / ls / pwd / cat ... # shell commands.
- <object>? / ?<object> # 显示<object>文档
- pylab # for interactive matplotlib sessions with Matlab/Mathematica-like functionality.

** library
*** simple WSGI
WSGI(web server gateway interface)定义了一个webserver的标准编程接口，对于coder来说只需要实现这个接口，然后可以选择外部其他的framework（比如gunicore），就可以将webserver运行起来了。下面是一个参考代码
#+BEGIN_SRC Python
def logic(environ,start_response):
    start_response('200 OK', # status code
                   [('Content-type','text/plain')]) # header
    return ("OK",)
#+END_SRC
对于logic需要处理两个参数：
   - environ 表示环境变量，对于get/post请求数据都会放在这里.下面是常用的环境
     - PATH_INFO // 请求path
     - REQUEST_METHOD // 请求方法 GET/POST
     - CONTENT_LENGTH //
     - QUERY_STRING // path后面接的query，可以使用cgi.parse_qs来进行解析
       - cgi.parse_qs解析后的结果就是dict
       - 如果dict同一个key出现多次的话会以数组方式保留
     - wsgi.input // 可以读取POST数据
   - start_response 表示一个continuation，恢复status code以及header

之后我们只需要选择一个合适的框架就可以运行起来了。python内置了一个WSGI framework。这里的validator可以帮助外围做一些验证。
#+BEGIN_SRC Python
def run():
    vlogic=validator(logic)
    httpd = make_server('', 8000, vlogic)
    httpd.serve_forever()
#+END_SRC

内置framework使用的是单进程启动模式，但是我们也可以很容易地修改成为多进程模式。不过更好的方式就是利用已有的webserver framework比如gunicore。假设上面的文件为x.py,那么使用下面方式启动即可
#+BEGIN_EXAMPLE
[dirlt@compaq-pc] > gunicorn -w 4 x:logic
2012-08-30 23:18:59 [16116] [INFO] Starting gunicorn 0.13.4
2012-08-30 23:18:59 [16116] [INFO] Listening at: http://127.0.0.1:8000 (16116)
2012-08-30 23:18:59 [16116] [INFO] Using worker: sync
2012-08-30 23:18:59 [16119] [INFO] Booting worker with pid: 16119
2012-08-30 23:18:59 [16120] [INFO] Booting worker with pid: 16120
2012-08-30 23:18:59 [16122] [INFO] Booting worker with pid: 16122
2012-08-30 23:18:59 [16121] [INFO] Booting worker with pid: 16121
^C2012-08-30 23:19:09 [16120] [INFO] Worker exiting (pid: 16120)
2012-08-30 23:19:09 [16116] [INFO] Handling signal: int
2012-08-30 23:19:09 [16119] [INFO] Worker exiting (pid: 16119)
2012-08-30 23:19:09 [16122] [INFO] Worker exiting (pid: 16122)
2012-08-30 23:19:09 [16121] [INFO] Worker exiting (pid: 16121)
2012-08-30 23:19:09 [16116] [INFO] Shutting down: Master
#+END_EXAMPLE

*** nginx + WSGI
python运行web大约有下面三种方式：
   1. 程序自己启动http server直接对外服务
   2. 用WSGI编写然后使用gunicorn这样的container启动对外服务
   3. nginx在前端做反向代理，uwsgi做WSGI Container和nginx通信

实践证明1这个方案因为python GIL缘故只能使用单线程处理，并且http server扩展性也不好。而方案2相对来说比较灵活，可以使用不同的container启动，并且也可以很容易地切换成为方案3，但是却不能够很好地处理子域名问题，同时部署上没有方案3灵活。
自己搭建fantuan.dirlt.com里面就涉及到了子域名这个问题，最后还是使用方案3解决的，使用的就是nginx + uwsgi + web.py这个解决方案。所以这里简单地记录一下如何配置。

在nginx/site-enables里面从default产生一份新的配置文件，修改内容
#+BEGIN_EXAMPLE
server {
        server_name fantuan.dirlt.com;
        location / {
                include uwsgi_params;
                uwsgi_pass  127.0.0.1:8001;
        }
}
#+END_EXAMPLE
也就是说对于fantuan.dirlt.com这个请求包含uwsgi_params里面的参数全部转发到127.0.0.1:8001这个端口。

然后在本地启动uwsgi绑定在127.0.0.1:8001这个端口上面，同时考虑到uwsgi支持配置文件的方式，我们首先编写配置文件
#+BEGIN_EXAMPLE
[uwsgi]
chdir = .
module = server:application
master = True
processes = 4
socket = 127.0.0.1:8001
vacuum = True
max-requests = 128
#+END_EXAMPLE

*todo(dirlt)：里面的字段的意思还不是清楚* 最重要的就是两个参数
   - module x:y 说明x.py里面的y对象是WSGI function对象
   - socket 必须指定是127.0.0.1:8001

*** excel
分析excel文件在实际生活中还是比较常见的，通常我们的问题就是卡在读取上面（主要原因是因为我对COM接口不太熟悉，不太了解windows编程）。使用xlrd可以通过python来访问excel文件。

   - xlrd http://pypi.python.org/pypi/xlrd
   - 文档 http://www.lexicon.net/sjmachin/xlrd.htm（看起来可能比较费劲，下面的py文档更加可读）
   - py文档 packages.python.org/xlrd3（xlrd3是针对python3的，但是和xlrd API是完全兼容的）
   - 参考链接 http://www.shello.name/?p=133

从文档里面可以看到它是直接分析excel文件的，通过阅读OpenOffice的关于M$ Excel文件格式文档编写的。
#+BEGIN_VERSE
    Development of this module would not have been possible without the document “OpenOffice.org’s Documentation of the Microsoft Excel File Format” (“OOo docs” for short). The latest version is available from OpenOffice.org in PDF format and XML format. Small portions of the OOo docs are reproduced in this document. A study of the OOo docs is recommended for those who wish a deeper understanding of the Excel file layout than the xlrd docs can provide.
#+END_VERSE
   - PDF format http://sc.openoffice.org/excelfileformat.pdf
   - XML format http://sc.openoffice.org/excelfileformat.sxw

基本上能够得到所有的数据，包括处理date信息，单元格的格式化信息，名字引用信息，内部统一使用Unicode（如果内部使用其他编码的话会自动转换）
#+BEGIN_VERSE
Features:
1.Support for handling dates, and documentation of Excel date problems and how to avoid them.
2.Unicode aware; correctly handles “compressed” Unicode in modern files; decodes legacy charsets in older files (if Python has the codec).
3.Extracts all data (including Booleans and error-values)
4.Extracts named references
5.Extracts formatting information for cells (number format, font, alignment, borders, backgrounds, protection) and rows/columns (default height/width, etc). This effort was funded by Simplistix Ltd.
6.Further information: APIs, README, HISTORY
#+END_VERSE

但是也有一些信息没有提取出来（但是对于很多简单的应用来说的话是没有必要的）。包括表格，图片，宏等嵌入对象，VBA模块，公式，注释以及超链等。
#+BEGIN_VERSE
Exclusions: xlrd will not attempt to decode password-protected (encrypted) files. Otherwise, it will safely and reliably ignore any of these if present:
1.Charts, Macros, Pictures, any other embedded object. WARNING: currently this includes embedded worksheets.
2.Visual Basic (VBA) modules
3.Formulas (results of formula calculations are extracted, of course)
4.Comments and hyperlinks
#+END_VERSE

下面是一个相对简单的例子（但是大部分时候应该足够了）。
#+BEGIN_SRC Python
#!/usr/bin/env python
#coding:utf-8
#Copyright (C) dirlt

import xlrd
book=xlrd.open_workbook('x.xls')

print '--------------------sheets:#%d--------------------'%(book.nsheets)
for i in range(0,book.nsheets):
    sheet=book.sheet_by_index(i)
    print '----------sheet%d:\'%s\', rows:%d, cols:%d----------'%(i,sheet.name,sheet.nrows,sheet.ncols)
    for r in range(0,sheet.nrows):
        for c in range(0,sheet.ncols):
            cell=sheet.cell(r,c)
            if(cell):
                # access cell.ctype.
                print '%s '%(cell.value),
        print ''
#+END_SRC

*** httplib
关于httplib.HTTPConnection超时问题
- python - HTTP Request Timeout - Stack Overflow : http://stackoverflow.com/questions/265720/http-request-timeout
- 构造函数的timeout是connect timeout. 而不是recv/send timeout. 超时单位是秒.
- send/recv timeout可以通过socket.setdefaulttimeout()来设置，全局设置对所有socket有效.
- 对单个socket可以通过设置connection.sock.settimeout完成，但是必须首先connect才能够获得sock对象.

*** datetime
#+BEGIN_SRC Python
def convertDateTimeToTimeStamp(s):
    st = time.strptime(s,'%Y-%m-%d %H:%M:%S')
    return int(time.mktime(st))

def convertTimeStampToDateTime(ts):
    # in seconds.
    st = time.localtime(int(ts))
    return time.strftime('%Y-%m-%d %H:%M:%S',st)
#+END_SRC

