#!/usr/bin/env bash
#Copyright (C) dirlt

# basic path.
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:$PATH
export MANPATH=/usr/local/share/man:/usr/share/man:$MANPATH
export EDITOR=vim # write commit message in a interactive way.

# language.
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
# export LANG="zh_CN.UTF-8"
# export LANGUAGE="zh_CN.UTF-8"
# export LC_ALL="zh_CN.UTF-8"

# mac or ubuntu.
is_mac() {
    if [ $(uname -s) = "Darwin" ]; then echo "1"; else echo "0"; fi
}
# in virtual machine or not.
is_vm() {
    if [ "$USER" != "dirlt" ]; then echo "1"; else echo "0"; fi
}

# CDH settings.
configure_cdh() {
    local CDH3=1
    local CDH4_2_0=0
    local CDH4_3_0=0

    # on mac
    if [ $(is_mac) = 1 ]; then
        HADOOP_CLASSPATH=.:$HADOOP_LZO/build/hadoop-lzo-0.4.17-SNAPSHOT.jar
        JAVA_LIBRARY_PATH=$HADOOP_LZO/build/native/Mac_OS_X-x86_64-64/lib/
    fi
    if [ $CDH3 = 1 ]; then
	export HADOOP_HOME=$HOME/utils/hadoop-0.20.2-cdh3u3/
	export HADOOP_CONF_DIR=$HADOOP_HOME/conf
	export HBASE_HOME=$HOME/utils/hbase-0.90.4-cdh3u3/
	export HBASE_CONF_DIR=$HBASE_HOME/conf
	export HIVE_HOME=$HOME/utils/hive-0.7.1-cdh3u3/
    fi
    if [ $CDH4_2_0 = 1 ]; then
	export HADOOP_HOME=$HOME/utils/hadoop-2.0.0-cdh4.2.0
	export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop/
	export HBASE_HOME=$HOME/utils/hbase-0.94.2-cdh4.2.0/
	export HBASE_CONF_DIR=$HBASE_HOME/conf
	export HIVE_HOME=$HOME/utils/hive-0.10.0-cdh4.2.0/
    fi
    if [ $CDH4_3_0 = 1 ]; then
	export HADOOP_HOME=$HOME/utils/hadoop-2.0.0-cdh4.3.0
	export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop/
	export HBASE_HOME=$HOME/utils/hbase-0.94.6-cdh4.3.0/
	export HBASE_CONF_DIR=$HBASE_HOME/conf
	export HIVE_HOME=$HOME/utils/hive-0.10.0-cdh4.3.0/
    fi
    HADOOP_CLASSPATH=.:$HADOOP_HOME/lib/hadoop-lzo-0.4.15.jar
    JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native/Linux-amd64-64:$HADOOP_HOME/lib/native
    PATH=$HADOOP_HOME/bin:$PATH
    PATH=$HADOOP_HOME/sbin:$PATH
    PATH=$HBASE_HOME/bin:$PATH
    PATH=$HIVE_HOME/bin:$PATH

    export HADOOP_CLASSPATH
    export JAVA_LIBRARY_PATH
    export PATH
}
configure_cdh

# Java settings.
configure_java() {
    if [ $(is_mac) = 1 ]; then
        JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/
    else
        JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/
    fi
    CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$HADOOP_CLASSPATH:$CLASSPATH
    CLASSPATH=.:./target/classes:./target/dependency:$CLASSPATH
    LD_LIBRARY_PATH=$JAVA_LIBRARY_PATH:$LD_LIBRARY_PATH
    PATH=$JAVA_HOME/bin:$PATH

    export JAVA_HOME
    export CLASSPATH
    export LD_LIBRARY_PATH
    export PATH
}
configure_java

# utilities
configure_utils() {
    # texmacs.
    PATH=$HOME/utils/TeXmacs-1.0.7-static-gnu-linux/bin:$PATH

    # maven
    PATH=$HOME/utils/apache-maven-3.0.5/bin:$PATH

    # protocol buffers.
    PATH=$HOME/utils/protobuf-2.3.0/build/bin:$PATH
    PATH=$HOME/utils/protobuf-2.4.1/build/bin:$PATH
    PATH=$HOME/utils/protobuf-2.5.0/build/bin:$PATH

    # scala and sbt
    export SCALA_HOME=$HOME/utils/scala-2.10.2
    PATH=$SCALA_HOME/bin:$PATH
    export SBT_HOME=$HOME/utils/sbt
    PATH=$SBT_HOME/bin:$PATH
    export SBT_OPTS="-Dsbt.global.base=$HOME/.sbt -Dsbt.ivy.home=$HOME/.ivy2"

    export PATH
}
configure_utils

# private key
configure_key() {
    ssh-add $HOME/.ssh/id_rsa 2>/dev/null
    ssh-add $HOME/.ssh/github 2>/dev/null
}
configure_key

# galera settings.
# source ~/.private/files/galera.rc

KAFKA_HOME=$HOME/utils/kafka_2.10-0.8.2.1
run_zookeeper() {
    cd $KAFKA_HOME
    (./bin/zookeeper-server-start.sh ./config/zookeeper.properties >/tmp/zookeeper.out 2>&1 &)
    cd -
}
run_kafka() {
    cd $KAFKA_HOME
    (./bin/kafka-server-start.sh ./config/server.properties >/tmp/kafka.out 2>&1 &)
    cd -
}
kafka_create_topc() {
    topic=${1:-"test"}
    cd $KAFKA_HOME
    ./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic $topic
    cd -
}
kafka_list_topic() {
    cd $KAFKA_HOME
    bin/kafka-topics.sh --zookeeper localhost:2181 --describe
    cd -
}
kafka_delete_topc() {
    topic=${1:-"test"}
    cd $KAFKA_HOME
    ./bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic $topic
    cd -
}
kafka_write_topic() {
    topic=${1:-"test"}
    cd $KAFKA_HOME
    bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test <<EOF
0. this is test message.
1. this is test message.
2. this is test message.
EOF
    cd -
}
kafka_read_topic() {
    topic=${1:-"test"}
    cd $KAFKA_HOME
    bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning
    cd -
}

# docker settings.
# ---------- docker starts ----------#
dk() {
    if [ $# -eq 0 ]; then
        docker
        return
    fi
    case $1 in
        create)
            shift 1
            __dk_create_node $@
            ;;
        connect)
            shift 1
            __dk_connect_node $@
            ;;
        list)
            __dk_list
            ;;
        *)
            docker $@
            ;;
    esac
}

export DK_IMAGE="ubuntu:local"
__dk_create_node() {
    while test $# -gt 0
    do
        local ipd=$((103+$1))
        local ip="192.168.101.$ipd"
        docker run -d \
            -v /home/dirlt/repo:/mnt/repo \
            -v /home/dirlt/.private:/mnt/.private \
            --name "u$1" --hostname "u$1" \
            --lxc-conf="lxc.network.type=veth" \
            --lxc-conf="lxc.network.name=eth1" \
            --lxc-conf="lxc.network.flags=up" \
            --lxc-conf="lxc.network.link=xbr1" \
            --lxc-conf="lxc.network.ipv4=$ip/24" \
            $DK_IMAGE \
            /usr/sbin/sshd -D
        shift 1
    done
}


__dk_connect_node() {
    local ip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' $1)
    shift 1
    local user="vagrant"
    while test $# -gt 0
    do
        case $1 in
            --user)
                shift 1
                user=$1
                ;;
            *)
                ;;
        esac
        shift 1
    done
    echo "connect to $user@$ip"
    ssh $user@$ip
}

__dk_list() {
    docker ps -a
    echo '----------'
    docker images | grep -v "<none>"
}

dk_build_image() {
    cd $HOME/.private/files
    docker build -t $DK_IMAGE .
    cd -
}

dk_create_bridge() {
    sudo brctl addbr br1
    sudo brctl addbr br2
    sudo ifconfig br1 inet 192.168.16.254 netmask 255.255.255.0
    sudo ifconfig br2 inet 192.168.17.254 netmask 255.255.255.0
    sudo brctl addbr xbr1
    sudo ifconfig xbr1 inet 192.168.101.254 netmask 255.255.255.0
}

dk_remove_bridge() {
    sudo ifconfig br1 down
    sudo ifconfig br2 down
    sudo ifconfig xbr1 down
    sudo brctl delbr br1
    sudo brctl delbr br2
    sudo brctl delbr xbr1
}

dk_clean_sudo() {
    # sudo usermod -G docker -a dirlt
    sudo chown dirlt /var/run/docker.sock
}

dk_remove_containers() {
    docker rm -f $(docker ps -a -q)
}
dk_remove_images() {
    docker rmi -f $(docker images -q)
}
# ---------- docker ends ----------#

# customized commands.
pgrep() {
  ps aux | grep $1
}
alias ex_dstat='dstat -cdgmnpsy'
alias ps_mysqld='pgrep mysqld'

git_commit() {
    local issue_id=$1
    local message=$2
    git commit -m "Refs #$issue_id: $message"
}
svn_commit() {
    local ticket_id=$1
    local message=$2
    svn commit -m "Refs #$ticket_id: $message"
}
bzr_commit() {
    local bug_id=$1
    local message=$2
    bzr commit --fixes lp:$bug_id -m "References lp:$bug_id $message"
}

gdb_backtrace_process()
{
    gdb -batch -ex "thread apply all bt" -p $1
    # gdb -batch -ex "thread apply all bt full" -p $1
}

#export IDEA_HOME=$HOME/utils/idea-IC-123.72 # 12.0
export IDEA_HOME=$HOME/utils/idea-IC-139.659.2 # 14.0.2
start_idea() {
    (sh $IDEA_HOME/bin/idea.sh >/tmp/idea.out 2>&1 &)
}
export PYC_HOME=$HOME/utils/pycharm-community-4.0.3/ # 4.0.3
start_pycharm() {
    (sh $PYC_HOME/bin/pycharm.sh > /tmp/pycharm.out 2>&1 &)
}

# start_ibus() {
#     (ibus-daemon &)
# }

run_mysql() {
    mkdir -p /tmp/mysql-data
    docker ps -a | grep mysql > /dev/null
    if [ $? = 0 ]; then
        docker start mysql
    else
        $HOME/repo/tomb/dockerfiles/mysql/start $@
    fi
}
run_redis() {
    mkdir -p /tmp/redis-data
    docker ps -a | grep redis > /dev/null
    if [ $? = 0 ]; then
        docker start redis
    else
        $HOME/repo/tomb/dockerfiles/redis/start $@
    fi
}
build_mysql() {
    cd $HOME/repo/tomb/dockerfiles
    ./build.sh mysql
    cd -
}
build_redis() {
    cd $HOME/repo/tomb/dockerfiles
    ./build.sh redis
    cd -
}

apt_update() {
    sudo rm -rf /etc/apt/sources.list
    sudo ln -s $HOME/.private/files/sources.list /etc/apt/sources.list

    # # docker
    # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9

    # # ubuntu tweak
    # sudo add-apt-repository -y ppa:tualatrix/ppa

    # # emacs24
    # sudo add-apt-repository -y ppa:cassou/emacs

    # # f.lux https://justgetflux.com/
    # sudo add-apt-repository -y ppa:kilian/f.lux

    # # fcitx
    # sudo add-apt-repository -y ppa:fcitx-team/nightly

    sudo apt-get update
}

home_http_server() {
    cd $HOME
    python -m SimpleHTTPServer 8080
    cd -
}

home_http_server_once() {
    local port_info
    port_info=$(lsof -i:8080 -Pn | grep "(LISTEN)")
    if [ -z "$port_info" ]; then
        echo "start home_http_server..."
        cd $HOME
        (python -m SimpleHTTPServer 8080 >/tmp/home_http_server.out 2>&1 &)
        cd -
    fi
}
if [ $(is_vm) = 0 ]; then
    home_http_server_once
fi

mvn_over_socks_proxy() {
    # export MAVEN_OPTS="-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=62221"
    mvn -DsocksProxyHost=127.0.0.1 -DsocksProxyPort=62221 $@
}

cxx_indent() {
    dos2unix $@
    # http://astyle.sourceforge.net/astyle.html

    # 一些不要使用的选项(看上去我们会很想使用)
    # --indent-cases // case后面内容多一次缩进,但是会让case部分{}存在问题.
    # --indent-namespaces // 会让namespace下面内容多一个层缩进.
    # --indent-classes // 虽然能够让public:,private:产生所缩进,但是造成函数出现两次缩进.
    # --break-blocks // 在{}之后断开一行.看上去很好,但是不太合适.
    # --delete-empty-lines // 删除函数内不必要空行.看上去很好,但是不太合适.

    # 一些可以使用的选项
    # --suffix=none // 不进行任何备份.
    # --style=java // 基本风格使用java style.
    # --brackets=attach // 括号附着在函数和条件表达式之后.
    # --indent-switches // switch里面case进行缩进.
    # --indent-labels // label进行缩进.
    # --indent-preprocessor // 预处理换行使用缩进.
    # --indent-col1-comments // 注释进行缩进.
    # --add-brackets // 条件表达语句都加上{}
    # --convert-tabs // 转换tab成为空格
    # --lineend=linux // 换行转换成为\n
    # --align-pointer=type // *和&都偏向类型.
    # --pad-oper // 在运算符附近加上空格

    astyle --suffix=none --style=java --indent=spaces=4 --brackets=attach \
        --indent-switches --indent-labels --indent-preprocessor --indent-col1-comments \
        --convert-tabs --verbose --lineend=linux --align-pointer=type --pad-oper $@
}

install_files() {
    for target in .emacs .shrc .zshrc .bashrc .screenrc .tmux.conf .iftoprc .gitconfig
    do
        echo "installing $target..."
        rm -rf $HOME/$target
        ln -s $HOME/repo/notes/files/$target $HOME/$target
    done

    echo "installing index.html..."
    rm -rf $HOME/index.html
    ln -s $HOME/.private/files/index.html $HOME/index.html

    echo "installing id_rsa.pub..."
    rm -rf $HOME/.ssh/id_rsa.pub
    ln -s $HOME/.private/files/id_rsa.pub $HOME/.ssh/id_rsa.pub
    test -f $HOME/.ssh/id_rsa.pub && chmod 0600 $HOME/.ssh/id_rsa.pub

    rm -rf $HOME/.ssh/id_rsa
    ln -s $HOME/.private/files/id_rsa $HOME/.ssh/id_rsa
    test -f $HOME/.ssh/id_rsa && chmod 0600 $HOME/.ssh/id_rsa

    echo "installing github.pub..."
    rm -rf $HOME/.ssh/github.pub
    ln -s $HOME/.private/files/github.pub $HOME/.ssh/github.pub
    test -f $HOME/.ssh/github.pub && chmod 0600 $HOME/.ssh/github.pub

    rm -rf $HOME/.ssh/github
    ln -s $HOME/.private/files/github $HOME/.ssh/github
    test -f $HOME/.ssh/github && chmod 0600 $HOME/.ssh/github

    echo "installing sumcreate.pub..."
    rm -rf $HOME/.ssh/sumcreate.pub
    ln -s $HOME/.private/files/sumcreate.pub $HOME/.ssh/sumcreate.pub
    test -f $HOME/.ssh/sumcreate.pub && chmod 0600 $HOME/.ssh/sumcreate.pub

    rm -rf $HOME/.ssh/sumcreate
    ln -s $HOME/.private/files/sumcreate $HOME/.ssh/sumcreate
    test -f $HOME/.ssh/sumcreate && chmod 0600 $HOME/.ssh/sumcreate

    echo "installing ssh.config..."
    rm -rf $HOME/.ssh/config
    ln -s $HOME/.private/files/ssh.config $HOME/.ssh/config

    echo "installing ivy2-credentials..."
    mkdir -p $HOME/.ivy2
    rm -rf $HOME/.ivy2/.credentials
    ln -s $HOME/.private/files/ivy2-credentials $HOME/.ivy2/.credentials

    echo "installing mvn-settings.xml..."
    mkdir -p $HOME/.m2
    rm -rf $HOME/.m2/settings.xml
    ln -s $HOME/.private/files/mvn-settings.xml $HOME/.m2/settings.xml

    echo "installing build.sbt..."
    mkdir -p $HOME/.sbt/plugins
    rm -rf $HOME/.sbt/plugins/build.sbt
    rm -rf $HOME/.sbt/build.sbt
    ln -s $HOME/.private/files/plugins.sbt $HOME/.sbt/plugins/build.sbt
    ln -s $HOME/.private/files/build.sbt $HOME/.sbt/build.sbt

    echo "installing tc-env..."
    rm -rf $HOME/contestapplet.conf
    ln -s $HOME/.private/tc-env/contestapplet.conf $HOME/contestapplet.conf

    echo "installing .oh-my-zsh"
    rm -rf $HOME/.oh-my-zsh
    ln -s $HOME/repo/oh-my-zsh $HOME/.oh-my-zsh

    echo "installing .emacs.d"
    rm -rf $HOME/.emacs.d
    ln -s $HOME/repo/emacs.d $HOME/.emacs.d
}

vpn_umeng_dp() {
    cd $HOME/.private/vpn-umeng-dp
    sudo openvpn --config client.conf
    cd -
}

start_tc_env() {
    (javaws "$HOME/.private/tc-env/ContestAppletProd.jnlp" &)
}

install_hosts() {
    echo "installing hosts..."
    sudo cp $HOME/.private/files/hosts /etc/hosts
}

update_hosts() {
    local url=${SMART_HOSTS_URL:-"http://smarthosts.googlecode.com/svn/trunk/hosts"}
    local hosts="$HOME/.private/files/hosts"
    cat $hosts | awk 'BEGIN {f=0;} /^#SmartHosts/ {f=1;} {if(f==0) print $0;}' > /tmp/hosts
    curl -S $url 2>/dev/null >> /tmp/hosts
    cp /tmp/hosts $hosts
    install_hosts
}

shadowsocks() {
    cd $HOME/.private/shadowsocks
    ./local.py
    cd -
}

shadowsocks_once() {
    local port_info
    port_info=$(lsof -i:62221 -Pn | grep "(LISTEN)")
    if [ -z "$port_info" ]; then
        echo "start shadowsocks..."
        cd $HOME/.private/shadowsocks
        (./local.py >/tmp/shadowsocks.out 2>&1 &)
        cd -
    fi
}
if [ $(is_vm) = 0 ]; then
    shadowsocks_once
fi

# install_gnu_package() {
#     if [ $# -lt 2 ]; then
#         echo "install_gnu_package gnu-package(tar.gz or tar.bz2) configure-parameters"
#         exit 1
#     fi
#     local NAME=$1; shift
#     local PARAMS=$@
#     case $NAME in
#         *.tar.gz)
#             local SRC=`basename $NAME .tar.gz`
#             rm -rf $SRC
#             tar xzf $NAME
#             ;;
#         *.tar.bz2)
#             local SRC=`basename $NAME .tar.bz2`
#             rm -rf $SRC
#             tar xjf $NAME
#             ;;
#     esac
#     cd $SRC
#     local CONFIG="./configure $PARAMS --enable-shared=no --enable-static=yes"
#     CFLAGS="-fPIC" CXXFLAGS="-fPIC" $CONFIG
#     make -j 8;make install
#     cd -
# }

set_core_dump_param() {
    ulimit -c unlimited
    sudo sysctl -q -w kernel.core_pattern="/tmp/core.%e.%t.%p"
}

set_ptrace_scope() {
    sudo sysctl -w kernel.yama.ptrace_scope=0
}

set_local_port_range() {
    sudo sysctl -q -w net.ipv4.ip_local_port_range="32768 61000"
}

install_ubuntu_packages() {
    cat $HOME/repo/notes/essay/ubuntu.org | grep "^   - sudo apt-get" | \
        awk '{print $5;}' | xargs sudo apt-get install -y
}

__tm_soft_sync_dir() {
    local src=$1
    local dst=$2
    local d=$3
    mkdir -p "$dst/$d/" 2>/dev/null
    echo "soft sync $d..."
    rsync -arz --no-times "$src/$d/" "$dst/$d/"
}

__tm_hard_sync_dir() {
    local src=$1
    local dst=$2
    local d=$3
    mkdir -p "$dst/$d/" 2>/dev/null
    echo "hard sync $d..."
    rsync -arz --delete --no-times "$src/$d/" "$dst/$d/"
}

__tm_sync_utils() {
    local src=$1
    local dst=$2
    mkdir -p "$dst/utils" 2>/dev/null
    for p in `find $src/utils/ -maxdepth 1 -type f`
    do
	echo "sync $p..."
	p=`basename $p`
	rsync -az --no-times $src/utils/$p $dst/utils/$p
    done
}

__time_machine_sync() {
    local src=$1
    shift 1
    local dst=$1
    shift 1

    echo "$src ---> $dst"

    local UTILS="no"
    local M2="no"
    local KP="no"
    local REPO="no"
    while test $# -gt 0
    do
        case $1 in
	    --utils)
	        UTILS="yes"
	        ;;
	    --m2)
	        M2="yes"
	        ;;
            --kp)
                KP="yes"
                ;;
            --repo)
                REPO="yes"
                ;;
        esac
        shift 1
    done
    if [ $UTILS = "yes" ] ; then __tm_sync_utils $src $dst; fi
    if [ $M2 = "yes" ] ; then __tm_soft_sync_dir $src $dst ".m2" ; fi
    if [ $KP = "yes" ] ; then __tm_hard_sync_dir $src $dst "KuaiPan"; fi
    if [ $REPO = "yes" ]; then
        __tm_hard_sync_dir $src $dst "repo/notes"
        __tm_hard_sync_dir $src $dst "repo/dirtysalt.github.io"
        __tm_hard_sync_dir $src $dst "repo/emacs.d"
        __tm_hard_sync_dir $src $dst "repo/oh-my-zsh"
        __tm_hard_sync_dir $src $dst "repo/tomb"
        __tm_hard_sync_dir $src $dst "repo/hardseed"
    fi
}

export TIME_MACHINE_DIR="/tmp/time-machine"
_setup_time_machine_dir() {
    if [ ! -h $TIME_MACHINE_DIR ]; then
        echo "setup time-machine directory..."
        ln -s "/media/dirlt/Expansion Drive/Ubuntu Backup/" $TIME_MACHINE_DIR
    fi
}
_setup_time_machine_dir

time_machine_backup() {
    local home=$HOME
    local backup=$TIME_MACHINE_DIR/dirlt
    __time_machine_sync $home $backup $@
}

time_machine_restore() {
    local home=$HOME
    local backup=$TIME_MACHINE_DIR/dirlt
    __time_machine_sync $backup $home $@
}

pp_proc_netstat() {
    cat /proc/net/netstat | awk 'BEGIN { ln=0; tcp=0; ip=0; }
{
  ln++; if(ln==1) tcp=NF; else if(ln==3) ip=NF;
  for(i=1;i<=NF;i++) d[ln,i]=$i;
}
END {
  for(i=2;i<=tcp;i++) printf("%25s => %10d\n", d[1,i], d[2,i]);
  for(i=2;i<=ip;i++) printf("%25s => %10d\n", d[3,i], d[4,i]);
}'
}

random_picture() {
    local image_path=${1:-"$HOME/ws/vmshare/rr/images/"}
    local num=$(ls $image_path 2>/dev/null| wc -l)
    if [ $num = 0 ]; then return ; fi
    local rand=$(date +%N)
    local n=$((rand%num))
    local awk_cmd="BEGIN {ln=0;} { ln++; if (ln==$n) print \$0;}"
    local fname=$(ls $image_path | awk $awk_cmd)
    (eog "$image_path/$fname" &)
}

configure_samba() {
    # smbpasswd -a dirlt
    sudo cp $HOME/.private/files/smb.conf /etc/samba/smb.conf
    sudo service smbd restart
}
